// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getPostByID = `-- name: GetPostByID :one
SELECT p.id, p.created_at, COALESCE(JSON_AGG(t.name ORDER BY t.name), '[]'::json) AS tags
FROM posts p
LEFT JOIN post_tags pt ON p.id = pt.post_id
LEFT JOIN tags t ON pt.tag_id = t.id
WHERE p.id = $1
GROUP BY p.id
`

type GetPostByIDRow struct {
	ID        int32
	CreatedAt sql.NullTime
	Tags      interface{}
}

func (q *Queries) GetPostByID(ctx context.Context, id int32) (GetPostByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Tags)
	return i, err
}

const getRecentPostsByTag = `-- name: GetRecentPostsByTag :many
SELECT p.id, p.created_at, t.name AS tag_name
FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
JOIN tags t ON pt.tag_id = t.id
WHERE t.name = $1 AND p.created_at < $2
ORDER BY p.created_at DESC
LIMIT $3 OFFSET $4
`

type GetRecentPostsByTagParams struct {
	Name      string
	CreatedAt sql.NullTime
	Limit     int32
	Offset    int32
}

type GetRecentPostsByTagRow struct {
	ID        int32
	CreatedAt sql.NullTime
	TagName   string
}

func (q *Queries) GetRecentPostsByTag(ctx context.Context, arg GetRecentPostsByTagParams) ([]GetRecentPostsByTagRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPostsByTag,
		arg.Name,
		arg.CreatedAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentPostsByTagRow
	for rows.Next() {
		var i GetRecentPostsByTagRow
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentPostsByTags = `-- name: GetRecentPostsByTags :many
SELECT DISTINCT p.id, p.created_at, t.name AS tag_name
FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
JOIN tags t ON pt.tag_id = t.id
WHERE t.name = ANY($1::text[]) AND p.created_at < $2
ORDER BY p.created_at DESC
LIMIT $3 OFFSET $4
`

type GetRecentPostsByTagsParams struct {
	Column1   []string
	CreatedAt sql.NullTime
	Limit     int32
	Offset    int32
}

type GetRecentPostsByTagsRow struct {
	ID        int32
	CreatedAt sql.NullTime
	TagName   string
}

func (q *Queries) GetRecentPostsByTags(ctx context.Context, arg GetRecentPostsByTagsParams) ([]GetRecentPostsByTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPostsByTags,
		pq.Array(arg.Column1),
		arg.CreatedAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentPostsByTagsRow
	for rows.Next() {
		var i GetRecentPostsByTagsRow
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
