// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package query

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createPostWithTags = `-- name: CreatePostWithTags :exec
WITH new_post AS (
    INSERT INTO posts (post_id, creator_did, created_at, text)
    VALUES ($1, $2, $3, $4)
    RETURNING id
),
inserted_tags AS (
    INSERT INTO tags (name)
    SELECT unnest($5::text[])
    ON CONFLICT (name) DO NOTHING
    RETURNING id, name
),
existing_tags AS (
    SELECT id, name
    FROM tags
    WHERE name = ANY($5::text[])
)
INSERT INTO post_tags (post_id, tag_id)
SELECT new_post.id, tag_id
FROM (
    SELECT id AS tag_id FROM inserted_tags
    UNION
    SELECT id AS tag_id FROM existing_tags
) AS all_tags
JOIN new_post ON true
`

type CreatePostWithTagsParams struct {
	PostID     string
	CreatorDid string
	CreatedAt  time.Time
	Text       string
	Tags       []string
}

// $6: tags
func (q *Queries) CreatePostWithTags(ctx context.Context, arg CreatePostWithTagsParams) error {
	_, err := q.db.ExecContext(ctx, createPostWithTags,
		arg.PostID,
		arg.CreatorDid,
		arg.CreatedAt,
		arg.Text,
		pq.Array(arg.Tags),
	)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, post_id, creator_did, created_at, text FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CreatorDid,
		&i.CreatedAt,
		&i.Text,
	)
	return i, err
}

const getRecentRootPostsByTagAndCreator = `-- name: GetRecentRootPostsByTagAndCreator :many
SELECT p.id, p.post_id, p.creator_did, p.created_at, p.text, t.name AS tag_name
FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
JOIN tags t ON pt.tag_id = t.id
WHERE t.name = ANY($1::text[])
  AND p.created_at >= $2
  AND p.creator_did = ANY($3::text[])
ORDER BY p.created_at DESC
LIMIT $5 OFFSET $4
`

type GetRecentRootPostsByTagAndCreatorParams struct {
	TagNames     []string
	CreatedAfter time.Time
	CreatorDids  []string
	RowOffset    int32
	RowLimit     int32
}

type GetRecentRootPostsByTagAndCreatorRow struct {
	ID         int32
	PostID     string
	CreatorDid string
	CreatedAt  time.Time
	Text       string
	TagName    string
}

func (q *Queries) GetRecentRootPostsByTagAndCreator(ctx context.Context, arg GetRecentRootPostsByTagAndCreatorParams) ([]GetRecentRootPostsByTagAndCreatorRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentRootPostsByTagAndCreator,
		pq.Array(arg.TagNames),
		arg.CreatedAfter,
		pq.Array(arg.CreatorDids),
		arg.RowOffset,
		arg.RowLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentRootPostsByTagAndCreatorRow
	for rows.Next() {
		var i GetRecentRootPostsByTagAndCreatorRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatorDid,
			&i.CreatedAt,
			&i.Text,
			&i.TagName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentRootPostsByTags = `-- name: GetRecentRootPostsByTags :many
SELECT DISTINCT p.id, p.post_id, p.creator_did, p.created_at, p.text, t.name AS tag_name
FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
JOIN tags t ON pt.tag_id = t.id
WHERE t.name = ANY($1::text[]) 
  AND p.created_at >= $2
ORDER BY p.created_at DESC
LIMIT $4 OFFSET $3
`

type GetRecentRootPostsByTagsParams struct {
	TagNames     []string
	CreatedAfter time.Time
	RowOffset    int32
	RowLimit     int32
}

type GetRecentRootPostsByTagsRow struct {
	ID         int32
	PostID     string
	CreatorDid string
	CreatedAt  time.Time
	Text       string
	TagName    string
}

func (q *Queries) GetRecentRootPostsByTags(ctx context.Context, arg GetRecentRootPostsByTagsParams) ([]GetRecentRootPostsByTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentRootPostsByTags,
		pq.Array(arg.TagNames),
		arg.CreatedAfter,
		arg.RowOffset,
		arg.RowLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentRootPostsByTagsRow
	for rows.Next() {
		var i GetRecentRootPostsByTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatorDid,
			&i.CreatedAt,
			&i.Text,
			&i.TagName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
