// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package query

import (
	"context"
	"time"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createPostWithTags = `-- name: CreatePostWithTags :exec
WITH new_post AS (
    INSERT INTO posts (post_id, creator_did, created_at, text, data)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id
),
inserted_tags AS (
    INSERT INTO tags (name)
    SELECT unnest($6::text[])
    ON CONFLICT (name) DO NOTHING
    RETURNING id, name
),
existing_tags AS (
    SELECT id, name
    FROM tags
    WHERE name = ANY($6::text[])
)
INSERT INTO post_tags (post_id, tag_id)
SELECT new_post.id, tag_id
FROM (
    SELECT id AS tag_id FROM inserted_tags
    UNION
    SELECT id AS tag_id FROM existing_tags
) AS all_tags
JOIN new_post ON true
`

type CreatePostWithTagsParams struct {
	PostID     string
	CreatorDid string
	CreatedAt  time.Time
	Text       string
	Data       pqtype.NullRawMessage
	Tags       []string
}

// $6: tags
func (q *Queries) CreatePostWithTags(ctx context.Context, arg CreatePostWithTagsParams) error {
	_, err := q.db.ExecContext(ctx, createPostWithTags,
		arg.PostID,
		arg.CreatorDid,
		arg.CreatedAt,
		arg.Text,
		arg.Data,
		pq.Array(arg.Tags),
	)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, post_id, creator_did, created_at, text, data FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CreatorDid,
		&i.CreatedAt,
		&i.Text,
		&i.Data,
	)
	return i, err
}

const getRecentPostsByTagAndCreator = `-- name: GetRecentPostsByTagAndCreator :many
SELECT p.id, p.post_id, p.creator_did, p.created_at, p.text, p.data
FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
JOIN tags t ON pt.tag_id = t.id
WHERE t.name = ANY($1::text[])
  AND p.created_at >= $2
  AND p.creator_did = ANY($3::text[])
ORDER BY p.created_at DESC
LIMIT $4
`

type GetRecentPostsByTagAndCreatorParams struct {
	Column1   []string
	CreatedAt time.Time
	Column3   []string
	Limit     int32
}

func (q *Queries) GetRecentPostsByTagAndCreator(ctx context.Context, arg GetRecentPostsByTagAndCreatorParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPostsByTagAndCreator,
		pq.Array(arg.Column1),
		arg.CreatedAt,
		pq.Array(arg.Column3),
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatorDid,
			&i.CreatedAt,
			&i.Text,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentPostsByTags = `-- name: GetRecentPostsByTags :many
SELECT DISTINCT p.id, p.created_at, t.name AS tag_name
FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
JOIN tags t ON pt.tag_id = t.id
WHERE t.name = ANY($1::text[]) AND p.created_at < $2
ORDER BY p.created_at DESC
LIMIT $3 OFFSET $4
`

type GetRecentPostsByTagsParams struct {
	Column1   []string
	CreatedAt time.Time
	Limit     int32
	Offset    int32
}

type GetRecentPostsByTagsRow struct {
	ID        int32
	CreatedAt time.Time
	TagName   string
}

// params: named
// $1: TagNames
// $2: Before
// $3: Limit
// $4: Offset
func (q *Queries) GetRecentPostsByTags(ctx context.Context, arg GetRecentPostsByTagsParams) ([]GetRecentPostsByTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPostsByTags,
		pq.Array(arg.Column1),
		arg.CreatedAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentPostsByTagsRow
	for rows.Next() {
		var i GetRecentPostsByTagsRow
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
